#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Aug 07, 2018 03:00:18 PM

import sys
import classes.Methods as met
from tkinter.filedialog import askopenfilename

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import page_test3_support


def vp_start_gui():
    # '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Regim(root)
    page_test3_support.init(root, top)
    root.mainloop()


w = None


def create_Regim(root, *args, **kwargs):
    # '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel(root)
    top = Regim(w)
    page_test3_support.init(w, top, *args, **kwargs)
    return w, top


def destroy_Regim():
    global w
    w.destroy()
    w = None

def exit_btn():
    global root
    root.quit()
    root.destroy()
    exit()


class Regim:

    def __init__(self, top=None):

        from PIL import ImageTk, Image

        global iminput_path, imref_path, icon_path

        self.icon_path = met.resource_path('icono.ico')
        self.imref_path = met.resource_path('000012.jpg')
        self.iminput_path = met.resource_path('000013.jpg')

        # '''This class configures and populates the toplevel window.
        #   top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#d9d9d9'  # X11 color: 'gray85'
        font10 = "-family Verdana -size 10 -weight normal -slant roman"  \
            " -underline 0 -overstrike 0"
        font9 = "-family Verdana -size 13 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"

        def do_match():

            images_matched = met.match(self.imref_path, self.iminput_path)

            Image_matched = Image.fromarray(images_matched)
            Image_matched.thumbnail((400, 400), Image.ANTIALIAS)
            Image_matched = ImageTk.PhotoImage(Image_matched)

            self.label_reg.configure(image=Image_matched)
            self.label_reg.image = Image_matched

        def openFile():
            try:
                path = askopenfilename(initialdir=".",
                                       filetypes=(("Image File .jpg", "*.jpg"), ("All Files", "*.*")),
                                       title="Choose an imgage."
                                       )
            except:
                pass

        size = 200, 200
        self.im_reference = Image.open(self.imref_path)
        self.im_reference.thumbnail(size, Image.ANTIALIAS)
        self.im_reference = ImageTk.PhotoImage(self.im_reference)

        self.im_input = Image.open(self.iminput_path)
        self.im_input.thumbnail(size, Image.ANTIALIAS)
        self.im_input = ImageTk.PhotoImage(self.im_input)

        top.geometry("975x610+127+8")
        top.title("Regim")
        top.iconbitmap(self.icon_path)
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#ffffff")
        top.configure(highlightcolor="black")

        self.menubar = Menu(top, font="TkMenuFont")
        top.configure(menu=self.menubar)

        self.file = Menu(top, tearoff=0)
        self.menubar.add_cascade(
            menu=self.file,
            font="TkMenuFont",
            label="File"
        )
        self.file.add_command(
            font="TkMenuFont",
            command=openFile,
            label="Load"
        )
        self.file.add_command(
            font="TkMenuFont",
            label="Exit",
            command=exit_btn
        )

        self.help = Menu(top, tearoff=0)

        self.menubar.add_cascade(
            menu=self.help,
            activebackground="#d9d9d9",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="Help"
        )
        self.help.add_command(
            activebackground="#d8d8d8",
            activeforeground="#000000",
            background="#d9d9d9",
            font="TkMenuFont",
            foreground="#000000",
            label="About"
        )

        self.frame_side = Frame(top)
        self.frame_side.place(relx=-0.02, rely=-0.02, relheight=1.01, relwidth=0.22)
        self.frame_side.configure(relief=SUNKEN)
        self.frame_side.configure(borderwidth="1")
        self.frame_side.configure(relief=SUNKEN)
        self.frame_side.configure(background="#383838")
        self.frame_side.configure(highlightbackground="#ffffff")
        self.frame_side.configure(highlightcolor="black")
        self.frame_side.configure(width=215)

        self.btn_match = Button(self.frame_side)
        self.btn_match.place(relx=0.16, rely=0.87, height=34, width=150)
        self.btn_match.configure(activebackground="#c55050")
        self.btn_match.configure(activeforeground="white")
        self.btn_match.configure(activeforeground="#ffffff")
        self.btn_match.configure(background="#ff6b6b")
        self.btn_match.configure(borderwidth="0")
        self.btn_match.configure(disabledforeground="#a3a3a3")
        self.btn_match.configure(font=font9)
        self.btn_match.configure(foreground="#ffffff")
        self.btn_match.configure(highlightbackground="#d9d9d9")
        self.btn_match.configure(highlightcolor="black")
        self.btn_match.configure(overrelief="sunken")
        self.btn_match.configure(pady="0")
        self.btn_match.configure(relief=FLAT)
        self.btn_match.configure(text='''Match features''')

        self.label_side = LabelFrame(self.frame_side)
        self.label_side.place(relx=0.16, rely=0.05, relheight=0.79, relwidth=0.7)

        self.label_side.configure(borderwidth="1")
        self.label_side.configure(foreground="black")
        self.label_side.configure(relief=FLAT)
        self.label_side.configure(background="#585858")
        self.label_side.configure(width=150)

        self.frame_process = Frame(top)
        self.frame_process.place(relx=0.18, rely=0.02, relheight=1.02, relwidth=0.83)
        self.frame_process.configure(borderwidth="1")
        self.frame_process.configure(background="#cccccc")
        self.frame_process.configure(highlightbackground="#000000")
        self.frame_process.configure(highlightcolor="#ffffff")
        self.frame_process.configure(width=805)

        self.label_ref = Label(self.frame_process)
        self.label_ref.place(relx=0.06, rely=0.09, height=200, width=200)
        self.label_ref.configure(background="#ffffff")
        self.label_ref.configure(cursor="hand2")
        self.label_ref.configure(disabledforeground="#a3a3a3")
        self.label_ref.configure(font=font10)
        self.label_ref.configure(foreground="#000000")
        self.label_ref.configure(text='''Reference image''')
        self.label_ref.configure(width=200)
        self.label_ref.configure(image=self.im_reference)
        self.label_ref.image = self.im_reference

        self.label_input = Label(self.frame_process)
        self.label_input.place(relx=0.06, rely=0.48, height=200, width=200)
        self.label_input.configure(activebackground="#f9f9f9")
        self.label_input.configure(activeforeground="black")
        self.label_input.configure(background="#ffffff")
        self.label_input.configure(cursor="hand2")
        self.label_input.configure(disabledforeground="#a3a3a3")
        self.label_input.configure(font=font10)
        self.label_input.configure(foreground="#000000")
        self.label_input.configure(highlightbackground="#d9d9d9")
        self.label_input.configure(highlightcolor="black")
        self.label_input.configure(text='''Input image''')
        self.label_input.configure(image=self.im_input)
        self.label_input.image = self.im_input

        self.label_reg = Label(self.frame_process)
        self.label_reg.place(relx=0.41, rely=0.48, height=200, width=400)
        self.label_reg.configure(background="#ffffff")
        self.label_reg.configure(disabledforeground="#a3a3a3")
        self.label_reg.configure(foreground="#000000")
        self.label_reg.configure(width=400)

        self.frame_foot = Frame(top)
        self.frame_foot.place(relx=-0.01, rely=0.94, relheight=0.07, relwidth=1.02)
        self.frame_foot.configure(relief=SUNKEN)
        self.frame_foot.configure(borderwidth="1")
        self.frame_foot.configure(relief=SUNKEN)
        self.frame_foot.configure(background="#383838")
        self.frame_foot.configure(highlightbackground="#d9d9d9")
        self.frame_foot.configure(highlightcolor="#ffffff")
        self.frame_foot.configure(width=995)

        self.Frame1 = Frame(top)
        self.Frame1.place(relx=-0.01, rely=-0.1, relheight=0.14, relwidth=1.03)
        self.Frame1.configure(relief=RIDGE)
        self.Frame1.configure(borderwidth="1")
        self.Frame1.configure(relief=RIDGE)
        self.Frame1.configure(background="#383838")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="#ffffff")
        self.Frame1.configure(width=1005)

        self.btn_match.configure(command=do_match)


if __name__ == '__main__':
    vp_start_gui()



